

-- Task 1: Database Design

-- 1. Create the database
CREATE DATABASE HMBank;
USE HMBank;

-- 2. Create Customers table
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    DOB DATE,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(15) UNIQUE,
    address VARCHAR(255)
);

-- 3. Create Accounts table
CREATE TABLE Accounts (
    account_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    account_type ENUM('savings', 'current', 'zero_balance'),
    balance DECIMAL(15,2) DEFAULT 0,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE
);

-- 4. Create Transactions table
CREATE TABLE Transactions (
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    account_id INT,
    transaction_type ENUM('deposit', 'withdrawal', 'transfer'),
    amount DECIMAL(15,2),
    transaction_date DATE DEFAULT (CURRENT_DATE),
    FOREIGN KEY (account_id) REFERENCES Accounts(account_id) ON DELETE CASCADE
);

-- Task 2: Insert Sample Records

INSERT INTO Customers (first_name, last_name, DOB, email, phone_number, address) VALUES
('John', 'Doe', '1990-05-15', 'john.doe@example.com', '9876543210', '123 Main St, City A'),
('Alice', 'Smith', '1985-10-22', 'alice.smith@example.com', '9876543211', '456 Elm St, City B'),
('Robert', 'Brown', '1992-03-11', 'robert.brown@example.com', '9876543212', '789 Pine St, City C'),
('Emily', 'Davis', '1988-07-25', 'emily.davis@example.com', '9876543213', '321 Oak St, City D'),
('Michael', 'Wilson', '1995-09-18', 'michael.wilson@example.com', '9876543214', '654 Birch St, City E'),
('Sarah', 'Martinez', '1993-11-30', 'sarah.martinez@example.com', '9876543215', '987 Cedar St, City F'),
('David', 'Anderson', '1986-02-05', 'david.anderson@example.com', '9876543216', '147 Spruce St, City G'),
('Emma', 'Thomas', '1998-06-14', 'emma.thomas@example.com', '9876543217', '258 Redwood St, City H'),
('James', 'Harris', '1991-12-22', 'james.harris@example.com', '9876543218', '369 Sequoia St, City I'),
('Olivia', 'Clark', '1994-04-03', 'olivia.clark@example.com', '9876543219', '753 Palm St, City J');

INSERT INTO Accounts (customer_id, account_type, balance) VALUES
(1, 'savings', 2000.00),
(2, 'current', 5000.00),
(3, 'savings', 1500.00),
(4, 'current', 7000.00),
(5, 'zero_balance', 0.00),
(6, 'savings', 2200.00),
(7, 'current', 6000.00),
(8, 'zero_balance', 0.00),
(9, 'savings', 3100.00),
(10, 'current', 4500.00);

INSERT INTO Transactions (account_id, transaction_type, amount) VALUES
(1, 'deposit', 1000.00),
(2, 'withdrawal', 500.00),
(3, 'deposit', 750.00),
(4, 'transfer', 1200.00),
(5, 'deposit', 300.00),
(6, 'withdrawal', 900.00),
(7, 'deposit', 4500.00),
(8, 'withdrawal', 200.00),
(9, 'transfer', 1300.00),
(10, 'deposit', 2500.00);

-- Task 2: SQL Queries

-- 1. Retrieve the name, account type, and email of all customers
SELECT first_name, last_name, account_type, email
FROM Customers
JOIN Accounts ON Customers.customer_id = Accounts.customer_id;

-- 2. List all transactions corresponding to each customer
SELECT Customers.first_name, Customers.last_name, Transactions.*
FROM Transactions
JOIN Accounts ON Transactions.account_id = Accounts.account_id
JOIN Customers ON Accounts.customer_id = Customers.customer_id;

-- 3. Increase the balance of a specific account by a certain amount
UPDATE Accounts SET balance = balance + 1000 WHERE account_id = 1;

-- 4. Combine first and last names of customers as full_name
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM Customers;
SET SQL_SAFE_UPDATES = 0;
-- 5. Remove accounts with a balance of zero where the account type is savings
DELETE FROM Accounts WHERE balance = 0 AND account_type = 'savings';
SET SQL_SAFE_UPDATES = 1;
-- 6. Find customers living in a specific city
SELECT * FROM Customers WHERE address LIKE '%City A%';

-- 7. Get the account balance for a specific account
SELECT balance FROM Accounts WHERE account_id = 1;

-- 8. List all current accounts with a balance greater than $1,000
SELECT * FROM Accounts WHERE account_type = 'current' AND balance > 1000;

-- 9. Retrieve all transactions for a specific account
SELECT * FROM Transactions WHERE account_id = 1;

-- 10. Calculate the interest accrued on savings accounts based on a given interest rate
SELECT account_id, balance * 0.05 AS interest_accrued FROM Accounts WHERE account_type = 'savings';

-- 11. Identify accounts where the balance is less than a specified overdraft limit
SELECT * FROM Accounts WHERE balance < -500;

-- 12. Find customers not living in a specific city
SELECT * FROM Customers WHERE address NOT LIKE '%City A%';


-- Task 3: Aggregate functions, Having, Order By, GroupBy and Joins

-- 1. Find the average account balance for all customers
SELECT AVG(balance) FROM Accounts;

-- 2. Retrieve the top 10 highest account balances
SELECT * FROM Accounts ORDER BY balance DESC LIMIT 10;

-- 3. Total Deposits for All Customers on a specific date
SELECT SUM(amount) FROM Transactions WHERE transaction_type = 'deposit' AND transaction_date = CURDATE();

-- 4. Find the Oldest and Newest Customers
SELECT * FROM Customers ORDER BY DOB ASC LIMIT 1;
SELECT * FROM Customers ORDER BY DOB DESC LIMIT 1;

-- 5. Retrieve transaction details along with the account type
SELECT Transactions.*, Accounts.account_type FROM Transactions JOIN Accounts ON Transactions.account_id = Accounts.account_id;

-- 6. Get a list of customers along with their account details
SELECT Customers.*, Accounts.* FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id;

-- 7. Retrieve transaction details along with customer information for a specific account
SELECT Customers.*, Transactions.* FROM Transactions JOIN Accounts ON Transactions.account_id = Accounts.account_id JOIN Customers ON Accounts.customer_id = Customers.customer_id WHERE Transactions.account_id = 1;

-- 8. Identify customers who have more than one account
SELECT customer_id FROM Accounts GROUP BY customer_id HAVING COUNT(account_id) > 1;

-- 9. Calculate the difference in transaction amounts between deposits and withdrawals
SELECT SUM(CASE WHEN transaction_type = 'deposit' THEN amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'withdrawal' THEN amount ELSE 0 END) AS transaction_difference FROM Transactions;

-- 10. Calculate the average daily balance for each account over a specified period
SELECT account_id, AVG(balance) AS avg_daily_balance FROM Accounts GROUP BY account_id;

-- 11. Calculate the total balance for each account type
SELECT account_type, SUM(balance) AS total_balance FROM Accounts GROUP BY account_type;

-- 12. Identify accounts with the highest number of transactions order by descending order
SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Transactions GROUP BY account_id ORDER BY transaction_count DESC;

-- 13. List customers with high aggregate account balances, along with their account types
SELECT Customers.customer_id, Customers.first_name, Customers.last_name, Accounts.account_type, SUM(Accounts.balance) AS total_balance FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY Customers.customer_id, Accounts.account_type HAVING total_balance > 5000 ORDER BY total_balance DESC;

-- 14. Identify and list duplicate transactions based on transaction amount, date, and account
SELECT account_id, amount, transaction_date, COUNT(*) AS duplicate_count FROM Transactions GROUP BY account_id, amount, transaction_date HAVING COUNT(*) > 1;

-- Task 4: Subqueries

-- 1. Retrieve the customer(s) with the highest account balance
SELECT * FROM Customers WHERE customer_id = (SELECT customer_id FROM Accounts ORDER BY balance DESC LIMIT 1);

-- 2. Calculate the average account balance for customers who have more than one account
SELECT AVG(balance) FROM Accounts WHERE customer_id IN (SELECT customer_id FROM Accounts GROUP BY customer_id HAVING COUNT(account_id) > 1);

-- 3. Retrieve accounts with transactions whose amounts exceed the average transaction amount
SELECT * FROM Transactions WHERE amount > (SELECT AVG(amount) FROM Transactions);

-- 4. Identify customers who have no recorded transactions
SELECT * FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Accounts JOIN Transactions ON Accounts.account_id = Transactions.account_id);

-- 5. Calculate the total balance of accounts with no recorded transactions
SELECT SUM(balance) FROM Accounts WHERE account_id NOT IN (SELECT DISTINCT account_id FROM Transactions);

-- 6. Retrieve transactions for accounts with the lowest balance
SELECT * FROM Transactions WHERE account_id = (SELECT account_id FROM Accounts ORDER BY balance ASC LIMIT 1);

-- 7. Identify customers who have accounts of multiple types
SELECT customer_id FROM Accounts GROUP BY customer_id HAVING COUNT(DISTINCT account_type) > 1;

-- 8. Calculate the percentage of each account type out of the total number of accounts
SELECT account_type, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Accounts) AS percentage FROM Accounts GROUP BY account_type;

-- 9. Retrieve all transactions for a customer with a given customer_id
SELECT Transactions.* FROM Transactions JOIN Accounts ON Transactions.account_id = Accounts.account_id WHERE Accounts.customer_id = 1;

-- 10. Calculate the total balance for each account type, including a subquery within the SELECT clause
SELECT account_type, (SELECT SUM(balance) FROM Accounts A WHERE A.account_type = B.account_type) AS total_balance FROM Accounts B GROUP BY account_type;

